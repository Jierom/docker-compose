server.port: 10843

spring.resources.static-locations: classpath:/testStatic/,classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/
  ## 数据源配置
  #spring.datasource.url=jdbc:mysql://localhost:3306/data_etl?useUnicode=true&characterEncoding=utf-8&useSSL=false
  #spring.datasource.username=root
  #spring.datasource.password=root
  #spring.datasource.driver-class-name=com.mysql.jdbc.Driver
  # 这4个参数key里不带druid也可以，即可以还用上面的这个4个参数

logging:
  level:
    root: INFO
  pattern:
    console: "[%date{ISO8601}] [%-5level] - [%thread] [%X{requestId}] [%logger] [%X{akkaSource}] - %msg %rootException %n"
    file: "[%date{ISO8601}] [%-5level] - [%thread] [%X{requestId}] [%logger] [%X{akkaSource}] - %msg %rootException %n"

spring:
  profiles: dev
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    time-between-eviction-runs-millis: 30000
    min-evictable-idle-time-millis: 300000
    test-while-idle: true
    test-on-borrow: false
    test-on-return: false
    filters: stat,log4j
    break-after-acquire-failure: true
    connection-error-retry-attempts: 3
    validation-query: SELECT 1
    url: jdbc:mysql://mysql:3306/kg_graph?useUnicode=true&useSSL=false&characterEncoding=utf8
    druid.username: root
    druid.password: can123mima
    druid.driver-class-name: com.mysql.jdbc.Driver
    # 初始化时建立物理连接的个数
    druid.initial-size: 5
    # 最大连接池数量
    druid.max-active: 20
    # 最小连接池数量
    druid.min-idle: 5
    # 获取连接时最大等待时间，单位毫秒
    druid.max-wait: 60000
    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    druid.time-between-eviction-runs-millis: 60000
    # 连接保持空闲而不被驱逐的最小时间
    druid.min-evictable-idle-time-millis: 300000
    # 用来检测连接是否有效的sql，要求是一个查询语句
    druid.validation-query: SELECT 1
    # 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
    druid.test-while-idle: true
    # 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    druid.test-on-borrow: false
    # 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。
    druid.test-on-return: false
    # 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。
    druid.pool-prepared-statements: true
    # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。
    druid.max-pool-prepared-statement-per-connection-size: 50
    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计
    druid.filters: stat,wall
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    druid.connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
    # 合并多个DruidDataSource的监控数据
    druid.use-global-data-source-stat: true
    # 初始化数据
    druid.initialize: true
    schema:
      - classpath:sql/metadata_schema.sql
    initialization-mode: ALWAYS

#mybatis
mybatis-plus:
  mapper-locations: classpath*:/mapper/**Mapper.xml
  #实体扫描，多个package用逗号或者分号分隔
  typeAliasesPackage: com.yitu.bdp.kg.entity
  global-config:
    #主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";
    id-type: 2
    #字段策略 0:"忽略判断",1:"非 NULL 判断"),2:"非空判断"
    field-strategy: 2
    #驼峰下划线转换
    db-column-underline: true
    #刷新mapper 调试神器
    refresh-mapper: true
    #数据库大写下划线转换
    #capital-mode: true
    #序列接口实现类配置
    #key-generator: com.baomidou.springboot.xxx
    #逻辑删除配置（下面3个配置）
    logic-delete-value: 0
    logic-not-delete-value: 1
    #自定义SQL注入器
    #sql-injector: com.baomidou.mybatisplus.mapper.LogicSqlInjector
    #自定义填充策略接口实现
    #meta-object-handler: com.baomidou.springboot.xxx
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
